Answer 1：
public class Test : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        StartCoroutine(MoveTo(transform, new Vector3(0, 10, 0), 2f, true, EaseType.none));
    }



    private IEnumerator MoveTo(Transform tr, Vector3 pos, float time, bool pingpong, EaseType type)
    {
        float t = 0;
        Vector3 v = tr.position;
        Vector3 de = (pos - tr.position) * (Time.deltaTime / time);
        Debug.Log(de);
        while (true)
        {
            t += Time.deltaTime;
            float a = t / time;
            switch (type)
            {
                case EaseType.easeIn:
                    tr.position += de * easeIn(a, Vector3.Magnitude(de), Vector3.Distance(pos, tr.position));
                    break;
                case EaseType.easeOut:
                    tr.position += de * easeOut(a, Vector3.Magnitude(de), Vector3.Distance(pos, tr.position));
                    break;
                case EaseType.easeInOut:
                    tr.position += de * easeInOut(a, Vector3.Magnitude(de), Vector3.Distance(pos, tr.position));
                    break;
                case EaseType.none:
                default:
                    tr.position += de;
                    break;
            }
            if (a >= 1.0f)
            {
                if (pingpong)
                {
                    StartCoroutine(MoveTo(tr, v, time, pingpong, type));
                }
                break;
            }
            yield return null;
        }
    }

    private float easeIn(float t, float b, float c)
    {
        float va = c * Mathf.Pow(t, 3) + b;
        Debug.Log(va);
        return va;
    }

    private float easeOut(float t, float b, float c)
    {
        return c * (Mathf.Pow(t - 1, 3) + 1) + b;
    }
    private float easeInOut(float t, float b, float c)
    {
        if ((t * 2) < 1)
            return c / 2 * Mathf.Pow(t * 2, 3) + b;
        else
            return c / 2 * (Mathf.Pow(t * 2 - 2, 3) + 2) + b;
    }

    public enum EaseType
    {
        none,
        easeIn,
        easeOut,
        easeInOut
    }
}
Answer 2：
private void CutAndPaste(int[,] a, int beginRow, int rowCount, int beginColumn, int columnCount, int targetBeginRow, int targetBeginColumn)
    {
        //越界
        if (beginRow + rowCount > 50 || beginColumn + columnCount > 100 || targetBeginRow + rowCount > 50 || targetBeginColumn + columnCount > 100)
        {
            return;
        }
        int[,] temp = new int[rowCount, columnCount];
        for (int i = 0; i < rowCount; i++)
        {
            for (int j = 0; j < columnCount; j++)
            {
                temp[i, j] = a[i + beginRow, j + beginColumn];
            }
        }

        for (int i = 0; i < rowCount; i++)
        {
            for (int j = 0; j < columnCount; j++)
            {
                a[i + targetBeginRow, j + targetBeginColumn] = temp[i, j];
            }
        }
    }
    
Answer 3：
private bool IsStrSpiltByList(string str, List<string> wordSet)
    {
        string tempStr = str;
        if (string.IsNullOrEmpty(str) || wordSet == null || wordSet.Count < 1)
        {
            return false;
        }
        for (int i = 0; i < wordSet.Count; i++)
        {
            if (!string.IsNullOrEmpty(str) && str.Contains(wordSet[i]))
            {
                str = str.Replace(wordSet[i], "");
                tempStr = tempStr.Replace(wordSet[i], i.ToString());
            }
            else
            {
                return false;
            }
        }
        if (!string.IsNullOrEmpty(str))
        {
            return false;
        }
        char[] strArray = tempStr.ToCharArray();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < strArray.Length; i++)
        {
            sb.Append(wordSet[int.Parse(strArray[i].ToString())]);
            if (i < strArray.Length - 1)
            {
                sb.Append(" ");
            }
        }
        Debug.Log(sb.ToString());
        return true;
    }
